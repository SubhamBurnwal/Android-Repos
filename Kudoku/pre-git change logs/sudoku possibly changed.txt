|Sudoku|

a board is a 3*3 matrix of groups which are 3*3 matrices of cells

 __
|__|			cell

 __ __ __
|__|__|__|
|__|__|__|		group
|__|__|__|
 __ __ __
|Gr|Gr|Gr|
|Gr|Gr|Gr|		board
|Gr|Gr|Gr|


cells:
# expectedly, a cell stores a value
# and an array of 9 possible values, ie, pencil-markings


matrix generation:
# at initialization, array is filled 1-9
# and groups are flagged is_empty
# during generation, array is gradually emptied via elimination
# on completion, array values are passed to cell values, and arrays destroyed
# during solution, users fill up the same array as pencil-markings
# we need to employ set subtraction to assign values to group arrays after comparison

we compare a cell with:
# all cells in current group
	group index remains same, cell index loops till 9
# all cells in line with current cell in other groups
**	cell in-group y-coordinate remains same, group x-coord loops till 3 and skips checking at caller x-coord
	cell in-group x-coord remains same, group y-coord loops till 3 and skips checking at caller y-coord

on compare:
# if all groups are flagged is_empty
	randomly fill the central group
# on comparing with a group flagged is_empty
	array values suffer no change, instead set subtraction is skipped
# on assigning a fixed value to a cell
	connected groups
		its array is destroyed
		arrays of the same group are subtracted with the value
		arrays along the same coords are subtracted with the value
	disconnected groups
		if connected group suffered cell value change, repeat
		if connected group suffered array change, do previous subtractions
# group array elimination
		if a cell has fixed value, by default it rejects all incoming entries
	for a group after analyzing
		if a group has one and only one cell that allows an entry
		then fix cell value
		if a group has n cells with n possible values along a single row XOR col,
		then remaining groups' cells' values along same row XOR col, get partially subtracted
	when comparing with another group
		if they have n cells with n possible values along the same rows XOR cols,
		then the third group's cells along the same rows XOR cols, get partially subtracted
# error
		if all cell values in a group, and their array values, cannot allow an entry
		board generation timer exceeds a certain count limit
		
_______________________________________________________________________________________________

class cell{
	int value;
	boolean values[9] = true;
}
class board{
	int total_count[9] = 0;
	vector<cell[9]> group;
}

void eliminate(cell[9]){
	for(int i=0;i<9;i++)
		if(cell[i].value != null)
			for(int j=0;j<9;j++)
				cell[j].values[cell[i].value]=false;
}
void promote(int value, int cellID, int groupID){
	board.get(groupID)[cellID] = value;
}
void analyze(int index){
	cell[9] cell = board[index];
	int times[9];
	vector<int> coords[9];					//need to initialize carefully
	for(int i=0;i<9;i++)
		times[i]=0;
	
	for(int i=0;i<9;i++)
		for(int j=0;j<9;j++)
			if(cell[i].values[j]){			//for the cells which allow an entry
				coord = {i%3,i/3};
				coords[j].add(coord);		//coord of the cells that allow that entry
				times[j]++;					//number of cells in group that allow that entry
				if(cell[i].value == j) {
					times[j]=-1;			//for an entry occupying cell value, -1 stands for not-needed
					total_count[j]++;
				}
				
			}

	for(int i=0;i<9;i++)
		if(times[i]>9-times[i])				//if number of times allowed is more than number of times not allowed
		{
			if(times[i] == 0) complain(1);	//ERROR: no cell allows current entry
			else if(times[i] == 1) promote(i,coords[i].get(times[i]), index); //promote candidate to cell value
			else if(times[i] > 1 && < 7){	//this might happen when an entry fits along two rows or columns
				while main
			}
		}

}
so much she wished
could be said
in silence
with her eyes